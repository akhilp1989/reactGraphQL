{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport userActionConstants from './userActionConstants';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../FireBase/firebase.utils';\nimport { SignInSuccess, SignInFailed } from './user.action';\nexport function* getUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get(); //console.log('userSnapshotData->',userSnapshot.data())\n\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailed(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailed(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailed(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionConstants.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionConstants.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  //yield console.log('Inside isUserAutenticated');\n  try {\n    const userAuth = yield getCurrentUser();\n  } catch (error) {\n    yield put(SignInFailed(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionConstants.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/akhil.parashara/Documents/graphqlreact/ecommerce-project/src/Redux/User/user.sagas.js"],"names":["takeLatest","put","call","all","userActionConstants","googleProvider","auth","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailed","getUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGNIN_START","onEmailSignInStart","EMAIL_SIGNIN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,IAAvB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAAQC,cAAR,EAAuBC,IAAvB,EAA4BC,yBAA5B,EAAsDC,cAAtD,QAA2E,+BAA3E;AACA,SAAQC,aAAR,EAAsBC,YAAtB,QAAyC,eAAzC;AAIA,OAAO,UAAUC,WAAV,CAAsBC,QAAtB,EAA+B;AAClC,MAAG;AACC,UAAMC,OAAO,GAAC,MAAMX,IAAI,CAACK,yBAAD,EAA2BK,QAA3B,CAAxB;AACA,UAAME,YAAY,GAAC,MAAMD,OAAO,CAACE,GAAR,EAAzB,CAFD,CAGC;;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAACO,MAAAA,EAAE,EAACF,YAAY,CAACE,EAAjB;AAAoB,SAAGF,YAAY,CAACG,IAAb;AAAvB,KAAD,CAAd,CAAT;AACH,GALD,CAMA,OAAMC,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACS,YAAY,CAACQ,KAAD,CAAb,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAChC,MAAG;AACF,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMd,IAAI,CAACe,eAAL,CAAqBhB,cAArB,CAAnB;AACA,UAAMM,WAAW,CAACS,IAAD,CAAjB;AACH,GAHE,CAIH,OAAMF,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACS,YAAY,CAACQ,KAAD,CAAb,CAAT;AACH;AACA;AAED,OAAO,UAAUI,eAAV,CAA2B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAA3B,EAAsD;AACzD,MAAG;AACC,UAAM;AAACL,MAAAA;AAAD,QAAO,MAAMd,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAAnB;AACA,UAAMd,WAAW,CAACS,IAAD,CAAjB;AACH,GAHD,CAIA,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,YAAY,CAACQ,KAAD,CAAb,CAAT;AACF;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CAACI,mBAAmB,CAACwB,mBAArB,EAAyCT,gBAAzC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAM7B,UAAU,CAACI,mBAAmB,CAAC0B,kBAArB,EAAwCR,eAAxC,CAAhB;AACH;AAED,OAAO,UAAUS,mBAAV,GAA+B;AAClC;AACA,MAAG;AACA,UAAMnB,QAAQ,GAAE,MAAMJ,cAAc,EAApC;AACF,GAFD,CAEC,OAAMU,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,YAAY,CAACQ,KAAD,CAAb,CAAT;AAEH;AAEJ;AAED,OAAO,UAAUc,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,mBAAmB,CAAC6B,kBAArB,EAAwCF,mBAAxC,CAAhB;AACH;AAED,OAAO,UAAUG,QAAV,GAAoB;AACvB,QAAM/B,GAAG,CAAC,CAACD,IAAI,CAACyB,mBAAD,CAAL,EAA2BzB,IAAI,CAAC2B,kBAAD,CAA/B,EAAoD3B,IAAI,CAAC8B,kBAAD,CAAxD,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,put,call,all} from 'redux-saga/effects'\nimport userActionConstants from './userActionConstants'\nimport {googleProvider,auth,createUserProfileDocument,getCurrentUser} from '../../FireBase/firebase.utils'\nimport {SignInSuccess,SignInFailed} from './user.action'\n\n\n\nexport function* getUserAuth(userAuth){\n    try{\n        const userRef=yield call(createUserProfileDocument,userAuth);\n        const userSnapshot=yield userRef.get()\n        //console.log('userSnapshotData->',userSnapshot.data())\n        yield put(SignInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\n    }\n    catch(error){\n        yield put(SignInFailed(error))\n    } \n}\n\nexport function* signInWithGoogle(){\n   try{\n    const {user}=yield auth.signInWithPopup(googleProvider);\n    yield getUserAuth(user)\n}\ncatch(error){\n    yield put(SignInFailed(error))\n}\n}\n\nexport function* signInWithEmail ({payload:{email,password}}){\n    try{\n        const {user}=yield auth.signInWithEmailAndPassword(email,password)\n        yield getUserAuth(user)\n    }\n    catch(error){\n       yield put(SignInFailed(error))\n    }\n}\n\nexport function* onGoogleSignInStart (){\n    yield takeLatest(userActionConstants.GOOGLE_SIGNIN_START,signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionConstants.EMAIL_SIGNIN_START,signInWithEmail)\n}\n\nexport function* isUserAuthenticated(){\n    //yield console.log('Inside isUserAutenticated');\n    try{\n       const userAuth= yield getCurrentUser();\n    }catch(error){\n        yield put(SignInFailed(error))\n\n    }\n\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(userActionConstants.CHECK_USER_SESSION,isUserAuthenticated)\n}\n\nexport function* userSaga(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession)])\n}"]},"metadata":{},"sourceType":"module"}