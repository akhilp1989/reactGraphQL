{"ast":null,"code":"import shopDataConstants from './shopDataConstants';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../FireBase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: shopDataConstants.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    collectionRef.get().then(snapshot => {\n      //console.log(snapshot.docs   )\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot); //console.log(collectionMap)\n\n      updateCollections(collectionMap);\n      this.setState({\n        loading: false\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/akhil.parashara/Documents/graphqlreact/ecommerce-project/src/Redux/ShopData/shopData.actions.js"],"names":["shopDataConstants","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionMap","updateCollections","setState","loading"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAAOC,SAAP,EAAiBC,+BAAjB,QAAuD,+BAAvD;AAEA,OAAO,MAAMC,qBAAqB,GAAC,OAAK;AACpCC,EAAAA,IAAI,EAACJ,iBAAiB,CAACK;AADa,CAAL,CAA5B;AAKP,OAAO,MAAMC,0BAA0B,GAAC,MAAI;AACxC,SAAOC,QAAQ,IAAE;AACb,UAAMC,aAAa,GAACP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAApB;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAE;AAC3B;AACA,YAAMC,aAAa,GAACX,+BAA+B,CAACU,QAAD,CAAnD,CAF2B,CAG3B;;AACAE,MAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAKE,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAC;AAAT,OAAd;AACH,KANL;AAOH,GAVD;AAYH,CAbM","sourcesContent":["import shopDataConstants from './shopDataConstants'\nimport{firestore,convertCollectionsSnapshotToMap} from '../../FireBase/firebase.utils'\n\nexport const fetchCollectionsStart=()=>({\n    type:shopDataConstants.FETCH_COLLECTIONS_START,\n   \n})\n\nexport const fetchCollectionsStartAsync=()=>{\n    return dispatch=>{\n        const collectionRef=firestore.collection('collections');\n\n        collectionRef.get().then(snapshot=>{\n                //console.log(snapshot.docs   )\n                const collectionMap=convertCollectionsSnapshotToMap(snapshot)\n                //console.log(collectionMap)\n                updateCollections(collectionMap)\n                this.setState({loading:false});\n            })\n    }\n   \n}"]},"metadata":{},"sourceType":"module"}